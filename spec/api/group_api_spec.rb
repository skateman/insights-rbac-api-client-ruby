=begin
#Role Based Access Control

#The API for Role Based Access Control.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for RBACApiClient::GroupApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupApi' do
  before do
    # run before each test
    @api_instance = RBACApiClient::GroupApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupApi' do
    it 'should create an instance of GroupApi' do
      expect(@api_instance).to be_instance_of(RBACApiClient::GroupApi)
    end
  end

  # unit tests for add_principal_to_group
  # Add a principal to a group in the tenant
  # @param uuid ID of group to update
  # @param group_principal_in Principal to add to a group
  # @param [Hash] opts the optional parameters
  # @return [GroupWithPrincipalsAndRoles]
  describe 'add_principal_to_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_role_to_group
  # Add a role to a group in the tenant
  # @param uuid ID of group to update
  # @param group_role_in Role to add to a group
  # @param [Hash] opts the optional parameters
  # @return [AddRoleToGroup200Response]
  describe 'add_role_to_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_group
  # Create a group in a tenant
  # @param group Group to create in tenant
  # @param [Hash] opts the optional parameters
  # @return [GroupOut]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group
  # Delete a group in the tenant
  # @param uuid ID of group to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_principal_from_group
  # Remove a principal from a group in the tenant
  # @param uuid ID of group to update
  # @param [Hash] opts the optional parameters
  # @option opts [String] :usernames A comma separated list of usernames for principals to remove from the group
  # @option opts [String] :service_accounts A comma separated list of usernames for service accounts to remove from the group
  # @return [nil]
  describe 'delete_principal_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_role_from_group
  # Remove a role from a group in the tenant
  # @param uuid ID of group to update
  # @param roles A comma separated list of role UUIDs for roles to remove from the group
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_role_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_group
  # Get a group in the tenant
  # @param uuid ID of group to get
  # @param [Hash] opts the optional parameters
  # @return [GroupWithPrincipalsAndRoles]
  describe 'get_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_principals_from_group
  # Get a list of principals from a group in the tenant
  # By default, responses are sorted in ascending order by username
  # @param uuid ID of group from which to get principals
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :admin_only Get only admin users within an account.
  # @option opts [String] :principal_username Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.
  # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
  # @option opts [Integer] :offset Parameter for selecting the offset of data.
  # @option opts [String] :order_by Parameter for ordering principals by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-username
  # @option opts [Boolean] :username_only Parameter for optionally returning only usernames for principals, bypassing a call to IT.
  # @option opts [String] :principal_type Parameter for selecting the type of principal to be returned.
  # @option opts [String] :service_account_client_ids By specifying a comma separated list of client IDs with this query parameter, RBAC will return an object with the specified client ID and it&#39;s matching boolean value to flag whether the client ID is present in the group or not. This query parameter cannot be used along with any other query parameter.
  # @option opts [String] :service_account_description Parameter for filtering the service accounts by their description.
  # @option opts [String] :service_account_name Parameter for filtering the service accounts by their name.
  # @return [GetPrincipalsFromGroup200Response]
  describe 'get_principals_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_groups
  # List the groups for a tenant
  # By default, responses are sorted in ascending order by group name
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
  # @option opts [Integer] :offset Parameter for selecting the offset of data.
  # @option opts [String] :name Parameter for filtering resource by name using string contains search.
  # @option opts [String] :name_match Parameter for specifying the matching criteria for an object&#39;s name or display_name.
  # @option opts [String] :scope Parameter for filtering resource by scope.
  # @option opts [String] :username A username for a principal to filter for groups
  # @option opts [String] :exclude_username A username for a principal to filter for groups where principal is not a member and can be added manually
  # @option opts [Array<String>] :uuid A list of UUIDs to filter listed groups.
  # @option opts [Array<String>] :role_names List of role name to filter for groups. It is exact match but case-insensitive
  # @option opts [String] :role_discriminator Discriminator that works with role_names to indicate matching all/any of the role names
  # @option opts [String] :order_by Parameter for ordering groups by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
  # @option opts [Boolean] :platform_default An optional flag to return either platform default or non-platform default groups.
  # @option opts [Boolean] :admin_default An optional flag to return either admin default or non-admin default groups.
  # @option opts [Boolean] :system An optional flag to return either system or non-system groups.
  # @return [GroupPagination]
  describe 'list_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_roles_for_group
  # List the roles for a group in the tenant
  # By default, responses are sorted in ascending order by role name
  # @param uuid ID of group
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exclude If this is set to true, the result would be roles excluding the ones in the group
  # @option opts [String] :role_name Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.
  # @option opts [String] :role_display_name Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.
  # @option opts [String] :role_description Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.
  # @option opts [Boolean] :role_system Parameter for filtering group roles by system flag.
  # @option opts [String] :role_external_tenant Parameter for filtering group roles by role &#x60;external_tenant&#x60; using string search.
  # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
  # @option opts [Integer] :offset Parameter for selecting the offset of data.
  # @option opts [String] :order_by Parameter for ordering roles by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
  # @return [GroupRolesPagination]
  describe 'list_roles_for_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_group
  # Update a group in the tenant
  # @param uuid ID of group to update
  # @param group Group to update in tenant
  # @param [Hash] opts the optional parameters
  # @return [GroupOut]
  describe 'update_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
