=begin
#Role Based Access Control

#The API for Role Based Access Control.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module RBACApiClient
  class PrincipalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the principals for a tenant
    # By default, responses are sorted in ascending order by username
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :match_criteria Parameter for specifying the matching criteria for an object&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \&quot;starts with\&quot; pattern. (default to 'exact')
    # @option opts [String] :usernames Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.
    # @option opts [String] :sort_order The sort order of the query, either ascending or descending. Defaults to ascending.
    # @option opts [String] :email E-mail address of principal to search for. Could be combined with match_criteria for searching.
    # @option opts [String] :status Set the status of users to get back. (default to 'enabled')
    # @option opts [Boolean] :admin_only Get only admin users within an account. Setting this would ignore the parameters: usernames, email (default to false)
    # @option opts [String] :order_by Parameter for ordering principals by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-username
    # @option opts [Boolean] :username_only Parameter for optionally returning only usernames for principals, bypassing a call to IT.
    # @option opts [String] :type Parameter for selecting the type of principal to be returned.
    # @return [ListPrincipals200Response]
    def list_principals(opts = {})
      data, _status_code, _headers = list_principals_with_http_info(opts)
      data
    end

    # List the principals for a tenant
    # By default, responses are sorted in ascending order by username
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :match_criteria Parameter for specifying the matching criteria for an object&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \&quot;starts with\&quot; pattern. (default to 'exact')
    # @option opts [String] :usernames Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.
    # @option opts [String] :sort_order The sort order of the query, either ascending or descending. Defaults to ascending.
    # @option opts [String] :email E-mail address of principal to search for. Could be combined with match_criteria for searching.
    # @option opts [String] :status Set the status of users to get back. (default to 'enabled')
    # @option opts [Boolean] :admin_only Get only admin users within an account. Setting this would ignore the parameters: usernames, email (default to false)
    # @option opts [String] :order_by Parameter for ordering principals by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-username
    # @option opts [Boolean] :username_only Parameter for optionally returning only usernames for principals, bypassing a call to IT.
    # @option opts [String] :type Parameter for selecting the type of principal to be returned.
    # @return [Array<(ListPrincipals200Response, Integer, Hash)>] ListPrincipals200Response data, response status code and response headers
    def list_principals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrincipalApi.list_principals ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PrincipalApi.list_principals, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PrincipalApi.list_principals, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PrincipalApi.list_principals, must be greater than or equal to 0.'
      end

      allowable_values = ["partial", "exact"]
      if @api_client.config.client_side_validation && opts[:'match_criteria'] && !allowable_values.include?(opts[:'match_criteria'])
        fail ArgumentError, "invalid value for \"match_criteria\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      allowable_values = ["enabled", "disabled", "all"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["username"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["service-account", "user"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/principals/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'match_criteria'] = opts[:'match_criteria'] if !opts[:'match_criteria'].nil?
      query_params[:'usernames'] = opts[:'usernames'] if !opts[:'usernames'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'admin_only'] = opts[:'admin_only'] if !opts[:'admin_only'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'username_only'] = opts[:'username_only'] if !opts[:'username_only'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPrincipals200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"PrincipalApi.list_principals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrincipalApi#list_principals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
