=begin
#Role Based Access Control

#The API for Role Based Access Control.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module RBACApiClient
  class GroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a principal to a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group_principal_in [GroupPrincipalIn] Principal to add to a group
    # @param [Hash] opts the optional parameters
    # @return [GroupWithPrincipalsAndRoles]
    def add_principal_to_group(uuid, group_principal_in, opts = {})
      data, _status_code, _headers = add_principal_to_group_with_http_info(uuid, group_principal_in, opts)
      data
    end

    # Add a principal to a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group_principal_in [GroupPrincipalIn] Principal to add to a group
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupWithPrincipalsAndRoles, Integer, Hash)>] GroupWithPrincipalsAndRoles data, response status code and response headers
    def add_principal_to_group_with_http_info(uuid, group_principal_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.add_principal_to_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.add_principal_to_group"
      end
      # verify the required parameter 'group_principal_in' is set
      if @api_client.config.client_side_validation && group_principal_in.nil?
        fail ArgumentError, "Missing the required parameter 'group_principal_in' when calling GroupApi.add_principal_to_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/principals/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_principal_in)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupWithPrincipalsAndRoles'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.add_principal_to_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#add_principal_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a role to a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group_role_in [GroupRoleIn] Role to add to a group
    # @param [Hash] opts the optional parameters
    # @return [AddRoleToGroup200Response]
    def add_role_to_group(uuid, group_role_in, opts = {})
      data, _status_code, _headers = add_role_to_group_with_http_info(uuid, group_role_in, opts)
      data
    end

    # Add a role to a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group_role_in [GroupRoleIn] Role to add to a group
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddRoleToGroup200Response, Integer, Hash)>] AddRoleToGroup200Response data, response status code and response headers
    def add_role_to_group_with_http_info(uuid, group_role_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.add_role_to_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.add_role_to_group"
      end
      # verify the required parameter 'group_role_in' is set
      if @api_client.config.client_side_validation && group_role_in.nil?
        fail ArgumentError, "Missing the required parameter 'group_role_in' when calling GroupApi.add_role_to_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/roles/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_role_in)

      # return_type
      return_type = opts[:debug_return_type] || 'AddRoleToGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.add_role_to_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#add_role_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group in a tenant
    # @param group [Group] Group to create in tenant
    # @param [Hash] opts the optional parameters
    # @return [GroupOut]
    def create_group(group, opts = {})
      data, _status_code, _headers = create_group_with_http_info(group, opts)
      data
    end

    # Create a group in a tenant
    # @param group [Group] Group to create in tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupOut, Integer, Hash)>] GroupOut data, response status code and response headers
    def create_group_with_http_info(group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.create_group ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling GroupApi.create_group"
      end
      # resource path
      local_var_path = '/groups/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.create_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#create_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group in the tenant
    # @param uuid [String] ID of group to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group(uuid, opts = {})
      delete_group_with_http_info(uuid, opts)
      nil
    end

    # Delete a group in the tenant
    # @param uuid [String] ID of group to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.delete_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.delete_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.delete_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a principal from a group in the tenant
    # @param uuid [String] ID of group to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :usernames A comma separated list of usernames for principals to remove from the group
    # @option opts [String] :service_accounts A comma separated list of usernames for service accounts to remove from the group
    # @return [nil]
    def delete_principal_from_group(uuid, opts = {})
      delete_principal_from_group_with_http_info(uuid, opts)
      nil
    end

    # Remove a principal from a group in the tenant
    # @param uuid [String] ID of group to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :usernames A comma separated list of usernames for principals to remove from the group
    # @option opts [String] :service_accounts A comma separated list of usernames for service accounts to remove from the group
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_principal_from_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.delete_principal_from_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.delete_principal_from_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/principals/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'usernames'] = opts[:'usernames'] if !opts[:'usernames'].nil?
      query_params[:'service-accounts'] = opts[:'service_accounts'] if !opts[:'service_accounts'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.delete_principal_from_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#delete_principal_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a role from a group in the tenant
    # @param uuid [String] ID of group to update
    # @param roles [String] A comma separated list of role UUIDs for roles to remove from the group
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role_from_group(uuid, roles, opts = {})
      delete_role_from_group_with_http_info(uuid, roles, opts)
      nil
    end

    # Remove a role from a group in the tenant
    # @param uuid [String] ID of group to update
    # @param roles [String] A comma separated list of role UUIDs for roles to remove from the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_role_from_group_with_http_info(uuid, roles, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.delete_role_from_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.delete_role_from_group"
      end
      # verify the required parameter 'roles' is set
      if @api_client.config.client_side_validation && roles.nil?
        fail ArgumentError, "Missing the required parameter 'roles' when calling GroupApi.delete_role_from_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/roles/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'roles'] = roles

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.delete_role_from_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#delete_role_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a group in the tenant
    # @param uuid [String] ID of group to get
    # @param [Hash] opts the optional parameters
    # @return [GroupWithPrincipalsAndRoles]
    def get_group(uuid, opts = {})
      data, _status_code, _headers = get_group_with_http_info(uuid, opts)
      data
    end

    # Get a group in the tenant
    # @param uuid [String] ID of group to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupWithPrincipalsAndRoles, Integer, Hash)>] GroupWithPrincipalsAndRoles data, response status code and response headers
    def get_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.get_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.get_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupWithPrincipalsAndRoles'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.get_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of principals from a group in the tenant
    # By default, responses are sorted in ascending order by username
    # @param uuid [String] ID of group from which to get principals
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :admin_only Get only admin users within an account. (default to false)
    # @option opts [String] :principal_username Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering principals by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-username
    # @option opts [Boolean] :username_only Parameter for optionally returning only usernames for principals, bypassing a call to IT.
    # @option opts [String] :principal_type Parameter for selecting the type of principal to be returned.
    # @option opts [String] :service_account_client_ids By specifying a comma separated list of client IDs with this query parameter, RBAC will return an object with the specified client ID and it&#39;s matching boolean value to flag whether the client ID is present in the group or not. This query parameter cannot be used along with any other query parameter.
    # @option opts [String] :service_account_description Parameter for filtering the service accounts by their description.
    # @option opts [String] :service_account_name Parameter for filtering the service accounts by their name.
    # @return [GetPrincipalsFromGroup200Response]
    def get_principals_from_group(uuid, opts = {})
      data, _status_code, _headers = get_principals_from_group_with_http_info(uuid, opts)
      data
    end

    # Get a list of principals from a group in the tenant
    # By default, responses are sorted in ascending order by username
    # @param uuid [String] ID of group from which to get principals
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :admin_only Get only admin users within an account. (default to false)
    # @option opts [String] :principal_username Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering principals by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-username
    # @option opts [Boolean] :username_only Parameter for optionally returning only usernames for principals, bypassing a call to IT.
    # @option opts [String] :principal_type Parameter for selecting the type of principal to be returned.
    # @option opts [String] :service_account_client_ids By specifying a comma separated list of client IDs with this query parameter, RBAC will return an object with the specified client ID and it&#39;s matching boolean value to flag whether the client ID is present in the group or not. This query parameter cannot be used along with any other query parameter.
    # @option opts [String] :service_account_description Parameter for filtering the service accounts by their description.
    # @option opts [String] :service_account_name Parameter for filtering the service accounts by their name.
    # @return [Array<(GetPrincipalsFromGroup200Response, Integer, Hash)>] GetPrincipalsFromGroup200Response data, response status code and response headers
    def get_principals_from_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.get_principals_from_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.get_principals_from_group"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.get_principals_from_group, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.get_principals_from_group, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling GroupApi.get_principals_from_group, must be greater than or equal to 0.'
      end

      allowable_values = ["username"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["service-account", "user"]
      if @api_client.config.client_side_validation && opts[:'principal_type'] && !allowable_values.include?(opts[:'principal_type'])
        fail ArgumentError, "invalid value for \"principal_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/groups/{uuid}/principals/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'admin_only'] = opts[:'admin_only'] if !opts[:'admin_only'].nil?
      query_params[:'principal_username'] = opts[:'principal_username'] if !opts[:'principal_username'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'username_only'] = opts[:'username_only'] if !opts[:'username_only'].nil?
      query_params[:'principal_type'] = opts[:'principal_type'] if !opts[:'principal_type'].nil?
      query_params[:'service_account_client_ids'] = opts[:'service_account_client_ids'] if !opts[:'service_account_client_ids'].nil?
      query_params[:'service_account_description'] = opts[:'service_account_description'] if !opts[:'service_account_description'].nil?
      query_params[:'service_account_name'] = opts[:'service_account_name'] if !opts[:'service_account_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPrincipalsFromGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.get_principals_from_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#get_principals_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the groups for a tenant
    # By default, responses are sorted in ascending order by group name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :name Parameter for filtering resource by name using string contains search.
    # @option opts [String] :name_match Parameter for specifying the matching criteria for an object&#39;s name or display_name.
    # @option opts [String] :scope Parameter for filtering resource by scope. (default to 'account')
    # @option opts [String] :username A username for a principal to filter for groups
    # @option opts [String] :exclude_username A username for a principal to filter for groups where principal is not a member and can be added manually
    # @option opts [Array<String>] :uuid A list of UUIDs to filter listed groups.
    # @option opts [Array<String>] :role_names List of role name to filter for groups. It is exact match but case-insensitive
    # @option opts [String] :role_discriminator Discriminator that works with role_names to indicate matching all/any of the role names
    # @option opts [String] :order_by Parameter for ordering groups by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
    # @option opts [Boolean] :platform_default An optional flag to return either platform default or non-platform default groups.
    # @option opts [Boolean] :admin_default An optional flag to return either admin default or non-admin default groups.
    # @option opts [Boolean] :system An optional flag to return either system or non-system groups.
    # @return [GroupPagination]
    def list_groups(opts = {})
      data, _status_code, _headers = list_groups_with_http_info(opts)
      data
    end

    # List the groups for a tenant
    # By default, responses are sorted in ascending order by group name
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :name Parameter for filtering resource by name using string contains search.
    # @option opts [String] :name_match Parameter for specifying the matching criteria for an object&#39;s name or display_name.
    # @option opts [String] :scope Parameter for filtering resource by scope. (default to 'account')
    # @option opts [String] :username A username for a principal to filter for groups
    # @option opts [String] :exclude_username A username for a principal to filter for groups where principal is not a member and can be added manually
    # @option opts [Array<String>] :uuid A list of UUIDs to filter listed groups.
    # @option opts [Array<String>] :role_names List of role name to filter for groups. It is exact match but case-insensitive
    # @option opts [String] :role_discriminator Discriminator that works with role_names to indicate matching all/any of the role names
    # @option opts [String] :order_by Parameter for ordering groups by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
    # @option opts [Boolean] :platform_default An optional flag to return either platform default or non-platform default groups.
    # @option opts [Boolean] :admin_default An optional flag to return either admin default or non-admin default groups.
    # @option opts [Boolean] :system An optional flag to return either system or non-system groups.
    # @return [Array<(GroupPagination, Integer, Hash)>] GroupPagination data, response status code and response headers
    def list_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.list_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.list_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.list_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling GroupApi.list_groups, must be greater than or equal to 0.'
      end

      allowable_values = ["partial", "exact"]
      if @api_client.config.client_side_validation && opts[:'name_match'] && !allowable_values.include?(opts[:'name_match'])
        fail ArgumentError, "invalid value for \"name_match\", must be one of #{allowable_values}"
      end
      allowable_values = ["account", "principal"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      allowable_values = ["all", "any"]
      if @api_client.config.client_side_validation && opts[:'role_discriminator'] && !allowable_values.include?(opts[:'role_discriminator'])
        fail ArgumentError, "invalid value for \"role_discriminator\", must be one of #{allowable_values}"
      end
      allowable_values = ["name", "modified", "principalCount", "policyCount"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/groups/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'name_match'] = opts[:'name_match'] if !opts[:'name_match'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'exclude_username'] = opts[:'exclude_username'] if !opts[:'exclude_username'].nil?
      query_params[:'uuid'] = @api_client.build_collection_param(opts[:'uuid'], :csv) if !opts[:'uuid'].nil?
      query_params[:'role_names'] = @api_client.build_collection_param(opts[:'role_names'], :csv) if !opts[:'role_names'].nil?
      query_params[:'role_discriminator'] = opts[:'role_discriminator'] if !opts[:'role_discriminator'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'platform_default'] = opts[:'platform_default'] if !opts[:'platform_default'].nil?
      query_params[:'admin_default'] = opts[:'admin_default'] if !opts[:'admin_default'].nil?
      query_params[:'system'] = opts[:'system'] if !opts[:'system'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupPagination'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.list_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the roles for a group in the tenant
    # By default, responses are sorted in ascending order by role name
    # @param uuid [String] ID of group
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude If this is set to true, the result would be roles excluding the ones in the group (default to false)
    # @option opts [String] :role_name Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.
    # @option opts [String] :role_display_name Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.
    # @option opts [String] :role_description Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.
    # @option opts [Boolean] :role_system Parameter for filtering group roles by system flag.
    # @option opts [String] :role_external_tenant Parameter for filtering group roles by role &#x60;external_tenant&#x60; using string search.
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering roles by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
    # @return [GroupRolesPagination]
    def list_roles_for_group(uuid, opts = {})
      data, _status_code, _headers = list_roles_for_group_with_http_info(uuid, opts)
      data
    end

    # List the roles for a group in the tenant
    # By default, responses are sorted in ascending order by role name
    # @param uuid [String] ID of group
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude If this is set to true, the result would be roles excluding the ones in the group (default to false)
    # @option opts [String] :role_name Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.
    # @option opts [String] :role_display_name Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.
    # @option opts [String] :role_description Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.
    # @option opts [Boolean] :role_system Parameter for filtering group roles by system flag.
    # @option opts [String] :role_external_tenant Parameter for filtering group roles by role &#x60;external_tenant&#x60; using string search.
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering roles by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-name
    # @return [Array<(GroupRolesPagination, Integer, Hash)>] GroupRolesPagination data, response status code and response headers
    def list_roles_for_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.list_roles_for_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.list_roles_for_group"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.list_roles_for_group, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GroupApi.list_roles_for_group, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling GroupApi.list_roles_for_group, must be greater than or equal to 0.'
      end

      allowable_values = ["name", "display_name", "modified", "policyCount"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/groups/{uuid}/roles/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'role_name'] = opts[:'role_name'] if !opts[:'role_name'].nil?
      query_params[:'role_display_name'] = opts[:'role_display_name'] if !opts[:'role_display_name'].nil?
      query_params[:'role_description'] = opts[:'role_description'] if !opts[:'role_description'].nil?
      query_params[:'role_system'] = opts[:'role_system'] if !opts[:'role_system'].nil?
      query_params[:'role_external_tenant'] = opts[:'role_external_tenant'] if !opts[:'role_external_tenant'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupRolesPagination'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.list_roles_for_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#list_roles_for_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group [Group] Group to update in tenant
    # @param [Hash] opts the optional parameters
    # @return [GroupOut]
    def update_group(uuid, group, opts = {})
      data, _status_code, _headers = update_group_with_http_info(uuid, group, opts)
      data
    end

    # Update a group in the tenant
    # @param uuid [String] ID of group to update
    # @param group [Group] Group to update in tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupOut, Integer, Hash)>] GroupOut data, response status code and response headers
    def update_group_with_http_info(uuid, group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.update_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.update_group"
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling GroupApi.update_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"GroupApi.update_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#update_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
