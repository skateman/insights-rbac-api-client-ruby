=begin
#Role Based Access Control

#The API for Role Based Access Control.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module RBACApiClient
  class PermissionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the available options for fields of permissions for a tenant
    # By default, options of application is returned. And could be resource_type or verb on demand.
    # @param field [String] specify which fields of permission to display
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :application Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.
    # @option opts [String] :resource_type Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.
    # @option opts [String] :verb Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.
    # @option opts [String] :exclude_globals If set to &#39;true&#39;, this will exclude any permission option with a global allowance on the supplied &#39;?field&#x3D;&#39; value of &#39;application&#39;, &#39;resource_type&#39; or &#39;verb&#39;. The default is &#39;false&#39;. (default to 'false')
    # @option opts [String] :allowed_only If set to &#39;true&#39;, this will exclude any permission with a role where the &#39;application&#39; is not in the role create allow list. (default to 'false')
    # @return [PermissionOptionsPagination]
    def list_permission_options(field, opts = {})
      data, _status_code, _headers = list_permission_options_with_http_info(field, opts)
      data
    end

    # List the available options for fields of permissions for a tenant
    # By default, options of application is returned. And could be resource_type or verb on demand.
    # @param field [String] specify which fields of permission to display
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :application Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.
    # @option opts [String] :resource_type Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.
    # @option opts [String] :verb Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.
    # @option opts [String] :exclude_globals If set to &#39;true&#39;, this will exclude any permission option with a global allowance on the supplied &#39;?field&#x3D;&#39; value of &#39;application&#39;, &#39;resource_type&#39; or &#39;verb&#39;. The default is &#39;false&#39;. (default to 'false')
    # @option opts [String] :allowed_only If set to &#39;true&#39;, this will exclude any permission with a role where the &#39;application&#39; is not in the role create allow list. (default to 'false')
    # @return [Array<(PermissionOptionsPagination, Integer, Hash)>] PermissionOptionsPagination data, response status code and response headers
    def list_permission_options_with_http_info(field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionApi.list_permission_options ...'
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling PermissionApi.list_permission_options"
      end
      # verify enum value
      allowable_values = ["application", "resource_type", "verb"]
      if @api_client.config.client_side_validation && !allowable_values.include?(field)
        fail ArgumentError, "invalid value for \"field\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionApi.list_permission_options, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionApi.list_permission_options, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PermissionApi.list_permission_options, must be greater than or equal to 0.'
      end

      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'exclude_globals'] && !allowable_values.include?(opts[:'exclude_globals'])
        fail ArgumentError, "invalid value for \"exclude_globals\", must be one of #{allowable_values}"
      end
      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'allowed_only'] && !allowable_values.include?(opts[:'allowed_only'])
        fail ArgumentError, "invalid value for \"allowed_only\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/permissions/options/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'field'] = field
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'application'] = opts[:'application'] if !opts[:'application'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'verb'] = opts[:'verb'] if !opts[:'verb'].nil?
      query_params[:'exclude_globals'] = opts[:'exclude_globals'] if !opts[:'exclude_globals'].nil?
      query_params[:'allowed_only'] = opts[:'allowed_only'] if !opts[:'allowed_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PermissionOptionsPagination'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"PermissionApi.list_permission_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionApi#list_permission_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the permissions for a tenant
    # By default, responses are sorted in ascending order by permission application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering permissions by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-application
    # @option opts [String] :application Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.
    # @option opts [String] :resource_type Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.
    # @option opts [String] :verb Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.
    # @option opts [String] :permission Partial match for the aggregate permission value name of a permission object.
    # @option opts [String] :exclude_globals If set to &#39;true&#39;, this will exclude any permission with a global allowance on either &#39;application&#39;, &#39;resource_type&#39; or &#39;verb&#39;. The default is &#39;false&#39;. (default to 'false')
    # @option opts [String] :exclude_roles An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).
    # @option opts [String] :allowed_only If set to &#39;true&#39;, this will exclude any permission with a role where the &#39;application&#39; is not in the role create allow list. (default to 'false')
    # @return [PermissionPagination]
    def list_permissions(opts = {})
      data, _status_code, _headers = list_permissions_with_http_info(opts)
      data
    end

    # List the permissions for a tenant
    # By default, responses are sorted in ascending order by permission application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @option opts [String] :order_by Parameter for ordering permissions by value. For inverse ordering, supply &#39;-&#39; before the param value, such as: ?order_by&#x3D;-application
    # @option opts [String] :application Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.
    # @option opts [String] :resource_type Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.
    # @option opts [String] :verb Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.
    # @option opts [String] :permission Partial match for the aggregate permission value name of a permission object.
    # @option opts [String] :exclude_globals If set to &#39;true&#39;, this will exclude any permission with a global allowance on either &#39;application&#39;, &#39;resource_type&#39; or &#39;verb&#39;. The default is &#39;false&#39;. (default to 'false')
    # @option opts [String] :exclude_roles An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).
    # @option opts [String] :allowed_only If set to &#39;true&#39;, this will exclude any permission with a role where the &#39;application&#39; is not in the role create allow list. (default to 'false')
    # @return [Array<(PermissionPagination, Integer, Hash)>] PermissionPagination data, response status code and response headers
    def list_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionApi.list_permissions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionApi.list_permissions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionApi.list_permissions, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PermissionApi.list_permissions, must be greater than or equal to 0.'
      end

      allowable_values = ["application", "resource_type", "verb", "permission"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'exclude_globals'] && !allowable_values.include?(opts[:'exclude_globals'])
        fail ArgumentError, "invalid value for \"exclude_globals\", must be one of #{allowable_values}"
      end
      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'allowed_only'] && !allowable_values.include?(opts[:'allowed_only'])
        fail ArgumentError, "invalid value for \"allowed_only\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/permissions/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'application'] = opts[:'application'] if !opts[:'application'].nil?
      query_params[:'resource_type'] = opts[:'resource_type'] if !opts[:'resource_type'].nil?
      query_params[:'verb'] = opts[:'verb'] if !opts[:'verb'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'exclude_globals'] = opts[:'exclude_globals'] if !opts[:'exclude_globals'].nil?
      query_params[:'exclude_roles'] = opts[:'exclude_roles'] if !opts[:'exclude_roles'].nil?
      query_params[:'allowed_only'] = opts[:'allowed_only'] if !opts[:'allowed_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PermissionPagination'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"PermissionApi.list_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionApi#list_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
